---
import Picture from "./Picture.astro";

interface Props {
  images: {
    imgUrl: string;
    alt: string;
  }[];
}

const { images } = Astro.props;
---

<div class="w-full mt-8">
  <div class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-[18px]">
    {
      images.map((image) => (
        <div class="w-full">
          <Picture
            imgUrl={image.imgUrl}
            alt={image.alt}
            sizes="(max-width: 270px) 100vw, 270px"
            class="w-full h-full object-cover rounded-lg cursor-pointer gallery-image"
          />
        </div>
      ))
    }
  </div>
</div>

<div
  id="imageModal"
  class="fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-75 hidden opacity-0 transition-opacity duration-300 ease-in-out cursor-pointer"
>
  <img
    id="modalImage"
    src=""
    alt=""
    class="max-w-[90vw] max-h-[90vh] object-contain"
  />
</div>

<script>
  function setupGallery() {
    const images = document.querySelectorAll(".gallery-image");
    const modal = document.getElementById("imageModal");
    const modalImage = document.getElementById(
      "modalImage"
    ) as HTMLImageElement | null;

    function openModal() {
      modal?.classList.remove("hidden");
      setTimeout(() => modal?.classList.remove("opacity-0"), 10);
    }

    function closeModal() {
      modal?.classList.add("opacity-0");
      setTimeout(() => modal?.classList.add("hidden"), 300);
    }

    function setImageSize() {
      if (modalImage) {
        const viewportWidth = window.innerWidth * 0.9;
        const viewportHeight = window.innerHeight * 0.9;
        const imgAspectRatio =
          modalImage.naturalWidth / modalImage.naturalHeight;
        const viewportAspectRatio = viewportWidth / viewportHeight;

        if (imgAspectRatio > viewportAspectRatio) {
          modalImage.style.width = "90vw";
          modalImage.style.height = "auto";
        } else {
          modalImage.style.width = "auto";
          modalImage.style.height = "90vh";
        }
      }
    }

    images.forEach((img) => {
      img.addEventListener("click", () => {
        if (img instanceof HTMLImageElement && modalImage) {
          modalImage.src = img.src;
          modalImage.alt = img.alt;
          modalImage.onload = setImageSize;
          openModal();
        }
      });
    });

    modal?.addEventListener("click", closeModal);

    document.addEventListener("keydown", (event) => {
      if (event.key === "Escape") {
        closeModal();
      }
    });

    window.addEventListener("resize", setImageSize);
  }

  // Run setup immediately
  setupGallery();

  // Also run setup on astro:page-load event
  document.addEventListener("astro:page-load", setupGallery);
</script>
