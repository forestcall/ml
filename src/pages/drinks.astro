---
import PageLayout from "@layouts/PageLayout.astro";
import Gallery from "@components/Gallery.astro";

interface Image {
  imgUrl: string;
  alt: string;
}

const imageFiles: string[] = [
  "a-Coors_Cheers__3.jpg",
  "a-Coors_Open_ip2__3.jpg",
  "a-Coors_Open_with_C_ip2__3.jpg",
  "a-Coors_Pour__2.jpg",
  "a-Crown_Royal_cu1_.jpg",
  "a-dr_15_.jpg",
  "a-dr_18_.jpg",
  "a-dr_80_.jpg",
  "b-Budweiser_bottle_P_.jpg",
  "b-Corona_comp_2.jpg",
  "b-dr_38_.jpg",
  "c-dr_47_.jpg",
  "c-dr_54_.jpg",
  "c-dr_55_.jpg",
  "Coke_effervescence_.jpg",
  "Corzo_bottle_.jpg",
  "Corzo_snake_.jpg",
  "Cream_pour_into_whisky_.jpg",
  "danzka_freezer_.jpg",
  "dr_5_.jpg",
  "dr_6_.jpg",
  "dr_7_.jpg",
  "dr_9_.jpg",
  "dr_12_.jpg",
  "dr_13_.jpg",
  "dr_22_.jpg",
  "dr_23_.jpg",
  "dr_24_.jpg",
  "dr_25_.jpg",
  "dr_27_.jpg",
  "dr_28_.jpg",
  "dr_32_.jpg",
  "dr_34_.jpg",
  "dr_35_.jpg",
  "dr_36a_.jpg",
  "dr_48_.jpg",
  "dr_60_.jpg",
  "dr_64_.jpg",
  "dr_68_.jpg",
  "dr_73_.jpg",
  "dr_74_.jpg",
  "dr_76_.jpg",
  "drinks_2_left_.jpg",
  "drinks_right__2.jpg",
  "drinks_right__3.jpg",
  "drinks_right_.jpg",
  "g-42_Below_lights.jpg",
  "g-42_Below_Passion_lights.jpg",
  "g-44_North_.jpg",
  "Gatorade_.jpg",
  "Guinness_Series_.jpg",
  "HONEY_BUILD_.jpg",
  "HONEY_BUILD3_.jpg",
  "HONEY_BUILD4_.jpg",
  "Jagermeister_Xmas_Flattene_.jpg",
  "JDaniels_20524_ip3_.jpg",
  "Justin_Icoc_pour_.jpg",
  "lipstick_drink-PPP_revised_.jpg",
  "Lolea_Red_.jpg",
  "Lolea_White_.jpg",
  "Makers_Mark_.jpg",
  "P_bud_beer_cu_.jpg",
  "P_coffee_.jpg",
  "P_coke_cu_.jpg",
  "P_Grapefruit_juice_.jpg",
  "P_ice_.jpg",
  "P_jb_&_coke_.jpg",
  "P_Knob_Creek_.jpg",
  "P_liqour_ads_.jpg",
  "P_Michelob_bottle_.jpg",
  "P_molson_splash_.jpg",
  "P_newcastle__2.jpg",
  "P_newcastle_.jpg",
  "P_orange_splash_.jpg",
  "P_palm_beer_glass_.jpg",
  "P_patron_ad_.jpg",
  "P_sapporo_.jpg",
  "P_tropicana_lemon_.jpg",
  "P_water_drop__d_.jpg",
  "P_water_drop_.jpg",
  "Paper_Chase_promo_Liquor_pg_5__3.jpg",
  "PATRON_GranBurdeos_2016_Bottle_FrontAngle_SKY_.jpg",
  "Pepsi_Bottle_HERO_Horizontal_.jpg",
  "Perrier_bubbles_.jpg",
  "Simply_fruit_punch_ip19_V1_.jpg",
  "Smirnoff_Raspberry_Sorbet__4b_.jpg",
  "steinlager_bottle_.jpg",
  "Tilted_Glass_.jpg",
  "White_wine_pour_.jpg",
  "x-Crown_Royal_left_.jpg",
  "x-Crown_Royal_StraightwBag_.jpg"
];

const images: Image[] = imageFiles.map(file => ({
  imgUrl: `/images/photos/drinks/${file}`,
  alt: file.replace(/\.(jpg|jpeg|png|gif)$/i, '')
           .replace(/[_-]/g, ' ')
           .replace(/\s+/g, ' ')
           .trim()
}));
---

<PageLayout title="Drinks" description="A gallery of drink photographs">
  <div class="w-full max-w-screen-xl mx-auto px-4 mt-[60px]">
    <Gallery images={images} />
  </div>
</PageLayout>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const images = document.querySelectorAll('.gallery-image');
    images.forEach((img, index) => {
      if (img instanceof HTMLImageElement) {
        img.addEventListener('error', function() {
          console.error(`Failed to load image ${index + 1}: ${this.src}`);
          // Instead of hiding the image, let's show an error placeholder
          this.src = 'data:image/svg+xml;charset=UTF-8,%3Csvg%20width%3D%22100%22%20height%3D%22100%22%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%3E%3Crect%20width%3D%22100%22%20height%3D%22100%22%20fill%3D%22%23eee%22%2F%3E%3Ctext%20x%3D%2250%25%22%20y%3D%2250%25%22%20dominant-baseline%3D%22middle%22%20text-anchor%3D%22middle%22%20font-size%3D%2214%22%20fill%3D%22%23aaa%22%3EError%3C%2Ftext%3E%3C%2Fsvg%3E';
          this.alt = 'Error loading image';
        });
        img.addEventListener('load', function() {
          console.log(`Successfully loaded image ${index + 1}: ${this.src}`);
        });
      }
    });
  });

  // Function to check if images are loading correctly
  function checkImages() {
    const images = document.querySelectorAll('.gallery-image');
    images.forEach((img, index) => {
      if (img instanceof HTMLImageElement) {
        fetch(img.src)
          .then(response => {
            if (!response.ok) {
              throw new Error(`HTTP error! status: ${response.status}`);
            }
            return response.blob();
          })
          .then(() => console.log(`Image ${index + 1} is accessible`))
          .catch(e => console.error(`Error with image ${index + 1}: ${e.message}`));
      }
    });
  }

  // Run the check after a short delay to ensure all images have been processed
  setTimeout(checkImages, 2000);
</script>
